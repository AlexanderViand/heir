#ifndef LIB_TRANSFORMS_POPULATESCALE_POPULATESCALE_TD_
#define LIB_TRANSFORMS_POPULATESCALE_POPULATESCALE_TD_

include "mlir/Pass/PassBase.td"

def PopulateScaleBGV : Pass<"populate-scale-bgv"> {
  let summary = "Populate the scale for BGV (GHS variant) ciphertext";
  let description = [{
    In the original BGV scheme, it is required that each modulus in
    the modulus chain is a prime number q such that $q \equiv 1 \pmod{t}$,
    the plaintext modulus. This is to ensure that the after each modulus
    switching, the plaintext message is preserved. However, this limits
    the possible choices of the moduli chain.

    In the GHS variant of BGV, such requirement is removed by introducing
    scaling factor to the ciphertext, with the cost of scale management.
    This pass is responsible for such management.

    This pass relies on concrete SchemeParamAttr annotated on the module
    to determine the scale for each ciphertext. Such annotation can be
    generated by the `generate-param-bgv` pass.

    (* example filepath=tests/Transforms/populate_scale/bgv/doctest.mlir *)
  }];
}

def PopulateScaleCKKS : Pass<"populate-scale-ckks"> {
  let summary = "Populate the scale for CKKS ciphertext";
  let description = [{
    In CKKS, each ciphertext is associated with a scaling factor $\Delta$,
    and such scaling factor will change after homomorphic operations
    such as multiplication and modulus reducing.

    However, certain operations such as addition require the input ciphertexts
    to have the same scale. This pass is then responsible for managing the scale
    of the ciphertexts.

    This pass relies on concrete SchemeParamAttr annotated on the module
    to determine the scale for each ciphertext. Such annotation can be
    generated by the `generate-param-ckks` pass.

    The scaling factor is expressed in logarithm form.

    (* example filepath=tests/Transforms/populate_scale/ckks/doctest.mlir *)
  }];

  let options = [
    Option<"beforeMulIncludeFirstMul", "before-mul-include-first-mul", "bool",
           /*default=*/"false", "Modulus switching before each multiplication, including the first multiplication (default to false)">,
  ];
}

#endif  // LIB_TRANSFORMS_POPULATESCALE_POPULATESCALE_TD_
